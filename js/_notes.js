/*
	Various notes.
*/


// class ControllerTodoItem {

	class ControllerTodoItem {
		constructor(model_ref, app) {
			// ...
			this.notify_func = undefined  // will be replaced by exact address of the this.notify function after it goes through .bind() mangling
										  // if there wasn't a need for bind() then we could just refer to the this.notify function normally
		}
	}

	unwire() {
		$(`li[data-id=${this.gui_id}]`).remove()
		this.gui_id = "gone"  // protect against using this controller again

		/*
		Remove the event listener from the document - HARD cos functions don't match cos of the bind !
		solution is to remember exact function signature as .f attribute when its created.
			document.removeEventListener("modified todoitem", this.notify, false)  // won't work
		*/
		document.removeEventListener("modified todoitem", this.notify_func, false)  // important!
		document.removeEventListener("deleted todoitem", this.notify_func, false)  // important!
		document.removeEventListener("filter changed", this.notify_func, false)  // important!

		/*
		TIP: use getEventListeners(document) to list all the listeners
		esp. getEventListeners(document)["modified todoitem"][0].listener
		or use chrome elements inspector and on rhs is the listeners tab 
		*/

		/*
		Compared to jquery solution, 
			this.todos.splice(this.getIndexFromEl(e.target), 1);
			this.render();
		we granularly delete the li vs re-rendering the entire list of li's

		- delete the todo item model by removing from App._todos
		- stop referencing the todo item controller by removing any controller document listeners using .removeEventListener( controller func )
		- delete the li gui element which will delete any DOM event bindings
		*/
	}

	toggle(e) {
		/*
		Compared to jquery solution, 
			var i = this.getIndexFromEl(e.target);  // THIS SEARCHING NOT NEEDED COS WE HAVE INDIV. CONTROLLERS
			this.todos[i].completed = !this.todos[i].completed;
			this.render();  // THIS COMPLETE REWRITE OF ALL THE TODOS NOT NEEDED COS GRANULAR UPDATE OF WHAT'S ALREADY THERE
		we are zen
		*/
		this.model_ref.completed = !this.model_ref.completed
	}

	update(e) {
		var el = e.target;
		var $el = $(el);
		var val = $el.val().trim();

		if ($el.data('abort')) {
			$el.data('abort', false);
		} else if (!val) {
			this.destroy(e);
			return;
		} else {
			// this.todos[this.getIndexFromEl(el)].title = val;   <---- Jquery solution needs to do a massive search
			this.model_ref.title = val  // oo solution is precise and simple
		}

		$(e.target).closest('li').removeClass('editing')
		// this.render();     <---- Jquery solution needs to re-render the entire list, oo solution does not
	}

	notify(event) {
		console.assert(this.gui_id != 'gone', 'old controller being notified?')
		if (event.type == "filter changed") {  // sent from footer controller
			console.log(`\tcontroller for '${this.model_ref.title}' got notified of filter change to '${event.detail.data.filter}', applying necessary visibility`)
			console.assert(event.detail.from == this.app.controller_footer, event.detail.from)
			// ...
	}
		// ...
	}

// class App {

	visualise_todoitem(todo_item) {
		// create controller
		let controller = new ControllerTodoItem(todo_item)

		// hack wiring, controller know about each other?!!
		controller.controller_header = this.controller_header
		controller.controller_footer = this.controller_footer

		// wire model changes -> controller (using observer pattern)
		/*
		Note, anonymous functions cannot be removed using removeEventListener(), nor can
		functions that have been called using bind() cos these indirectly also create an anonymous
		function. But you can remember the func generated by using bind() in order to remove it.
		Need to call bind() so that 'this' inside the handler refers to the controller.

		Viz. bind() is called on a FUNCTION and you pass in the value of 'this' that you want
		to be the case inside that function later, in this case it is 'controller'.
		*/
		// document.addEventListener("modified todoitem", (event) => { controller.notify(event) })  // cannot use removeEventListener() later
		controller.notify_func = controller.notify.bind(controller)  // remember exact signature of func so that we can later remove listener
		document.addEventListener("modified todoitem", controller.notify_func)
		document.addEventListener("deleted todoitem", controller.notify_func)
		document.addEventListener("filter changed", controller.notify_func)

		// wire gui changes -> controller (using dom events)
		// none wired here, all wired up in ControllerTodoItem constructor

		return todo_item
	}


	destroyCompleted() {
		// in oo version, we simply delete each completed todo
		this.getCompletedTodos().forEach(function (todo) {
			todo.delete()
		});

		// jquery version is pretty simple, just replace the todo list and re-render:
		// this.todos = this.getActiveTodos();
		// this.render();
	}

// HANDY

function format(obj) {
	return JSON.stringify(obj, null, " ");
}

function log(...txt) {
	document.querySelector("pre").textContent = `${txt.join("\n")}\n`
}

function log_append(...txt) {
	document.querySelector("pre").textContent += `${txt.join("\n")}\n`
}

