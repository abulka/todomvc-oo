
@startuml mvc-a-controller-pov

title Controller point of view

header
<font color=PaleVioletRed size=20>MVC-App Architecture</font>
by Andy Bulka 2020
endheader

package "App and Model" {
    class Model
    class App
}

' Package GUI {
'     class "View"
' }

Package Controller #PaleVioletRed {
    class "Controller"
}

class "Model"  << (M,#FF7700) >> {
    attr1
    attr2
    attr3
    set_attr1(val)
    set_attr2(val)
    notify_all()  // broadcast
}

class "Controller" << (C,#FF7700)>> {
    view
	app
    model
	on_gui_event()
    on_notify()  // listen to broadcast
}

class "View" << (V,#FF7700) >> {
    buttons
    text inputs
    checkbox inputs
    ---
    <img:/Users/Andy/Devel/todomvc-oo/docs/images/mgm-pattern-gui.png>

    View is the GUI

    e.g. DOM elements
    e.g. GUI user controls
}

class App  << (A,#FF7700) >> {
    model
    view-state
    business_logic1()
    business_logic2()
	notify_all()   // broadcast
}

note as User #white
    User
    <img:/Users/Andy/Devel/todomvc-oo/docs/images/mgm-pattern-gui-facing-right.png>
end note


"Controller" --> "View" : maintains /\n set DOM
"Controller" -----> "Model" : modifies \n model\n
"Controller" --> "App" : modifies \n app, \n access \n view state
"View" ..> "Controller" #Green : GUI events

Model ..> "Controller"  #DeepSkyBlue : events \n from model \n (setter)
App ..> "Controller"  #DeepSkyBlue : events \n from app

App --> Model : modifies \n model
User . View : interacts with
User .[hidden] View

' note "View is the GUI e.g. DOM" as c
' View . c
' View .[hidden] c

note as d
**Controller** mediates between the
View and **everything else**.

Controller modifies the Model directly.
Controller calls App business logic methods.
Controller accesses App view state.

Controller listens for events from Model & App.
end note
' Controller ... d
' Controller ...[hidden] d

@enduml


